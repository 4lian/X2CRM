<?php
/* * *******************************************************************************
 * The X2CRM by X2Engine Inc. is free software. It is released under the terms of 
 * the following BSD License.
 * http://www.opensource.org/licenses/BSD-3-Clause
 * 
 * X2Engine Inc.
 * P.O. Box 66752
 * Scotts Valley, California 95067 USA
 * 
 * Company website: http://www.x2engine.com 
 * Community and support website: http://www.x2community.com 
 * 
 * Copyright (C) 2011-2012 by X2Engine Inc. www.X2Engine.com
 * All rights reserved.
 * 
 * Redistribution and use in source and binary forms, with or without modification, 
 * are permitted provided that the following conditions are met:
 * 
 * - Redistributions of source code must retain the above copyright notice, this 
 *   list of conditions and the following disclaimer.
 * - Redistributions in binary form must reproduce the above copyright notice, this 
 *   list of conditions and the following disclaimer in the documentation and/or 
 *   other materials provided with the distribution.
 * - Neither the name of X2Engine or X2CRM nor the names of its contributors may be 
 *   used to endorse or promote products derived from this software without 
 *   specific prior written permission.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND 
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED 
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. 
 * IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, 
 * INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, 
 * BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, 
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF 
 * LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE 
 * OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED 
 * OF THE POSSIBILITY OF SUCH DAMAGE.
 * ****************************************************************************** */

/**
 * Remote data insertion & lookup API model. Has multiple magic methods and 
 * automatically makes cURL requests to API controller for ease of use. For each
 * kind of request, see the method in ApiController that corresponds to it. To 
 * view this reference, look at the URL path for the method. For example 'api/create'
 * corresponds to actionCreate in ApiController.
 * 
 * @package X2CRM.models
 * @author Jake Houser <jake@x2engine.com>
 */
class APIModel {

    /**
     * The user to authenticate with.  Set in constructor.
     * @var string 
     */
    private $_user = '';

    /**
     * The corresponding user key to authenticate with.  Set in constructor.
     * @var string 
     */
    private $_userKey = '';

    /**
     * The base URL of the server for the API to connect to. (i.e. www.yourserver.com/x2engine)
     * @var string 
     */
    private $_baseUrl = '';
    
    /**
     * Attributes to be used for creating/updating models.
     * @var array 
     */
    public $attributes;
    
    /**
     * Errors generated by API calls.
     * @var array 
     */
    public $errors;

    /**
     * Constructs a new API model and sets private variables.
     * @param string $user The username to authenticate with
     * @param string $userKey The user key to authenticate with
     * @param string $baseUrl The base path of the server for the API to connect to (i.e. www.yourserver.com/x2engine)
     */
    public function __construct($user = null, $userKey = null, $baseUrl = null) {
        $this->_user = $user;
        $this->_userKey = $userKey;
        $this->_baseUrl = $baseUrl;
    }

    /**
     * Creates a contact with attributes specified in the APIModel's attributes property.
     * @param boolean $leadRouting Boolean whether or not to use lead routing rules for contact assigned to.
     * @return string Response code from API request.
     */
    public function contactCreate($leadRouting = true) {
        $attributes = array(
            'assignedTo' => $this->_user,
            'visibility' => '1',
        );
        if ($leadRouting) {
            $ccUrl = 'http://' . $this->_baseUrl . '/index.php/admin/getRoutingType';
            $attributes['assignedTo'] = $this->_send($ccUrl, array_merge($this->attributes, $attributes));
        }
        $ccUrl = 'http://' . $this->_baseUrl . '/index.php/api/create/model/Contacts';
        $result=$this->_send($ccUrl, array_merge($this->attributes, $attributes));
        if(is_null(json_decode($result,true))){
            $this->errors=$result;
            return false;
        }else{
            $this->attributes=json_decode($result,true);
            return true;
        }
    }

    /**
     * Updates a contact with the specified attributes.
     * @param int $id Optional ID of the contact, will be used if the id attribute is not set.
     * @return string Response code from the API request. 
     */
    public function contactUpdate($id = null) {
        if (!isset($this->id))
            $this->id = $id;
        $ccUrl = 'http://' . $this->_baseUrl . '/index.php/api/update/model/Contacts';
        $result=$this->_send($ccUrl, $this->attributes);
        if(is_null(json_decode($result,true))){
            $this->errors=$result;
            return false;
        }else{
            $this->attributes=json_decode($result,true);
            return true;
        }
    }

    /**
     * Looks up a contact with the attributes set on the model.
     * @return string Response code from the API request.  JSON string of attributes on success. 
     */
    public function contactLookup() {
        $ccUrl = 'http://' . $this->_baseUrl . '/index.php/api/lookup/model/Contacts';
        foreach($this->attributes as $key=>$value){
            if(is_null($value) || $value==''){
                unset($this->attributes[$key]);
            }
        }
        $attributes = $this->_send($ccUrl, $this->attributes);
        if (!is_null(json_decode($attributes, true))) {
            $attributes = json_decode($attributes, true);
            $this->attributes = $attributes;
            return true;
        } else {
            $this->errors=$attributes;
            return false;
        }
    }

    /**
     * Deletes a contact with the specified ID.
     * @param int $id Optional ID of the contact, will be used if id attribute is not set.
     * @return string Response code of the API request.
     */
    public function contactDelete($id = null) {
        if (!isset($this->id))
            $this->id = $id;
        $ccUrl = 'http://' . $this->_baseUrl . '/index.php/api/delete/model/Contacts';
        $result=$this->_send($ccUrl, $this->attributes);
        if($result!=1){
            $this->errors=$result;
            return false;
        }else{
            return true;
        }
    }

    /**
     * Clears the attributes set on the model.
     */
    public function clearAttributes() {
        $this->attributes = array();
    }
    
    /**
     *
     * @param type $action
     * @return type 
     */
    public function checkAccess($action){
        $accessUrl = 'http://' . $this->_baseUrl . '/index.php/api/checkPermissions/action/'.$action.'/username/'.$this->_user.'/api/1';
        $result=$this->_send($accessUrl,array());
        return $result=='true';
    }

    /**
     * Function that actually sends the request to the server. 
     * @param string $url The full request URL including base path and route for create, update etc.
     * @param mixed $postData Post data to be included with the request.
     * @return string Response code sent by API controller. 
     */
    private function _send($url, $postData) {
        $ccSession = curl_init($url);
        curl_setopt($ccSession, CURLOPT_POST, 1);
        curl_setopt($ccSession, CURLOPT_POSTFIELDS, array_merge(array('userKey' => $this->_userKey, 'user' => $this->_user), $postData));
        curl_setopt($ccSession, CURLOPT_RETURNTRANSFER, 1);
        $ccResult = curl_exec($ccSession);
        return $ccResult;
    }

    /**
     * Magic method that handles setting attributes of the model.
     * @param string $name Attribute name.
     * @param string $value Attribute value.
     */
    public function __set($name, $value) {
        if (strpos($name, '_') === 0 || $name == 'attributes') {
            $this->$name = $value;
        } else {
            $this->attributes[$name] = $value;
        }
    }

    /**
     * Magic method that handles getting of an attribute of the model.
     * @param string $name The name of the attribute.
     * @return The value of the attribute if set, else null .
     */
    public function __get($name) {
        if (strpos($name, '_') === 0 || $name == 'attributes') {
            return $this->$name;
        }
        if (isset($this->attributes[$name])) {
            return $this->attributes[$name];
        }
        return null;
    }

    /**
     * Magic method to check if an attribute is set.
     * @param type $name Name of the attribute
     * @return boolean Whether or not the attribute is set.
     */
    public function __isset($name) {
        if (strpos($name, '_') === 0 || $name == 'attributes') {
            return isset($this->$name);
        } else {
            return isset($this->attributes[$name]);
        }
    }

}

?>
